@page "/"
@layout MainLayout
@inherits ProComponentBase
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject CookieStorage CookieStorage
@inject SSOPortalX.Data.Sso.SsoTokenService SsoTokenService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,User")]

@* Remove hardcoded PageTitle; MainLayout sets dynamic title *@

<div class="d-flex justify-space-between align-center mb-6">
    <h1 class="text-h4 font-weight-bold">My Applications</h1>
    @if (!_appsByCat.Any())
    {
        <a href="/setup-sample-data">
            <MButton Color="primary" Variant="text">
                <MIcon Left>mdi-plus</MIcon>
                Setup Sample Data
            </MButton>
        </a>
    }
</div>

@if (_appsByCat.Any())
{
    @foreach (var categoryGroup in _appsByCat)
    {
        <div class="mb-8">
            <div class="d-flex align-center mb-4">
                <MIcon Class="mr-2" Color="primary">mdi-folder-multiple</MIcon>
                <h3 class="text-h5 font-weight-medium">@categoryGroup.Key</h3>
                <MChip Class="ml-2" Small Color="primary" Outlined>
                    @categoryGroup.Count() @(categoryGroup.Count() == 1 ? "app" : "apps")
                </MChip>
            </div>
            
            <MRow>
                @foreach (var app in categoryGroup)
                {
                    <MCol Md=4 Sm=6 Cols=12 Class="mb-4">
                        <MCard Class="h-100 d-flex flex-column" Elevation="2" Hover Style="min-height: 180px;">
                            <MCardText Class="pb-0 flex-grow-1 d-flex flex-column">
                                <div class="d-flex align-center mb-3">
                                    @if (IsIconName(app.IconUrl))
                                    {
                                        <MIcon Size="40" Color="primary" Class="mr-3">
                                            @GetFallbackIcon(app.IconUrl)
                                        </MIcon>
                                    }
                                    else
                                    {
                                        <div class="mr-3" style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; background: #f5f5f5; border-radius: 8px; overflow: hidden; position: relative;">
                                            <img src="@app.IconUrl" alt="@app.Name" 
                                                 style="width: 100%; height: 100%; object-fit: contain; object-position: center; max-width: 40px; max-height: 40px; display: block;" 
                                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" 
                                                 onload="console.log('Successfully loaded:', '@app.IconUrl')" />
                                            <div style="display: none; width: 100%; height: 100%; align-items: center; justify-content: center; background: #4318FF; border-radius: 50%;">
                                                <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
                                                    <path d="M12 2C13.1 2 14 2.9 14 4V8C14 9.1 13.1 10 12 10H10V9H12.5V4C12.5 3.72 12.28 3.5 12 3.5S11.5 3.72 11.5 4V8C11.5 9.3 12.2 10 13 10H15V12H13C11.34 12 10 10.66 10 9V4C10 2.9 10.9 2 12 2ZM6 6V8H2.5L6 12L2 16H6V18H8V16H12V14H8V12H12V10H8V8H12V6H8V4H6V6ZM16 14V16H18V14H16Z"/>
                                                </svg>
                                            </div>
                                        </div>
                                    }
                                    <div>
                                        <h4 class="text-subtitle-1 font-weight-medium mb-1">@app.Name</h4>
                                        <div class="text-caption text--secondary">@app.Code</div>
                                    </div>
                                </div>
                                <p class="text-body-2 mb-0 flex-grow-1" style="overflow: hidden; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical;">@(string.IsNullOrEmpty(app.Description) ? "No description available" : app.Description)</p>
                            </MCardText>
                            <MCardActions Class="pt-0 mt-auto">
                                <MSpacer />
                                <MButton Color="primary" 
                                         OnClick="@(() => LaunchApplicationAsync(app))"
                                         Disabled="@(string.IsNullOrEmpty(app.WebhookUrl) || app.IsDisable)"
                                         Small>
                                    <MIcon Left Small>mdi-launch</MIcon>
                                    Launch
                                </MButton>
                            </MCardActions>
                        </MCard>
                    </MCol>
                }
            </MRow>
        </div>
    }
}
else
{
    <MCard Class="pa-8 text-center">
        <MCardText>
            <MIcon Size="120" Color="grey lighten-2" Class="mb-4">mdi-application-outline</MIcon>
            <h2 class="text-h5 font-weight-medium mb-2">No Applications Available</h2>
            <p class="text-body-1 text--secondary mb-4">You have not been granted access to any applications yet.</p>
            <div class="d-flex justify-center flex-wrap ga-2">
                <a href="/setup-sample-data">
                    <MButton Color="primary">
                        <MIcon Left>mdi-plus</MIcon>
                        Setup Sample Data
                    </MButton>
                </a>
                <MButton Color="grey" Outlined Href="/app/user/list">
                    <MIcon Left>mdi-account</MIcon>
                    Manage Users
                </MButton>
            </div>
        </MCardText>
    </MCard>
}

@code {
    private IEnumerable<IGrouping<string, SSOPortalX.Data.Models.Application>> _appsByCat = Enumerable.Empty<IGrouping<string, SSOPortalX.Data.Models.Application>>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user ID from session
            var currentUserIdStr = await CookieStorage.GetAsync("CurrentUserId");
            
            if (string.IsNullOrEmpty(currentUserIdStr) || !int.TryParse(currentUserIdStr, out int currentUserId))
            {
                // If no valid session, redirect to login
                Console.WriteLine("No valid session found, user needs to login");
                _appsByCat = Enumerable.Empty<IGrouping<string, SSOPortalX.Data.Models.Application>>();
                return;
            }

            using var context = DbContextFactory.CreateDbContext();

            // Get applications accessible to current user in a single filtered query
            var accessibleApps = await context.Applications
                .Include(a => a.Category)
                .Where(a => a.IsActive && context.UserAppAccesses.Any(uaa => uaa.UserId == currentUserId && uaa.AppId == a.Id))
                .ToListAsync();

            _appsByCat = accessibleApps.GroupBy(app => app.Category?.Name ?? "Uncategorized").ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading applications: {ex.Message}");
            _appsByCat = Enumerable.Empty<IGrouping<string, SSOPortalX.Data.Models.Application>>();
        }
    }

    private async Task LaunchApplicationAsync(SSOPortalX.Data.Models.Application app)
    {
        try
        {
            // Guard: prevent launching when app is disabled, inactive, or soft-deleted
            if (app == null || app.IsDisable || !app.IsActive || app.DeletedAt != null || string.IsNullOrEmpty(app.WebhookUrl))
            {
                Console.WriteLine($"Launch blocked for app {app?.Name}: disabled/inactive/deleted or missing webhook.");
                return;
            }

            // Get current user ID from session
            var currentUserIdStr = await CookieStorage.GetAsync("CurrentUserId");
            
            if (string.IsNullOrEmpty(currentUserIdStr) || !int.TryParse(currentUserIdStr, out int currentUserId))
            {
                // If no valid session, redirect to login
                NavigationManager.NavigateTo("/authentication/login");
                return;
            }

            // Get or create SSO token for this user and app
            var token = await SsoTokenService.GetOrCreateTokenAsync(currentUserId, app.Id);
            
            if (token != null && !string.IsNullOrEmpty(app.WebhookUrl))
            {
                // Create SSO URL with token parameter
                var ssoUrl = $"{app.WebhookUrl}?sso_token={token.Token}";
                
                // Open application in new tab with SSO token using JavaScript
                await JSRuntime.InvokeVoidAsync("open", ssoUrl, "_blank");
                
                Console.WriteLine($"Launching {app.Name} with SSO token for user {currentUserId}");
            }
            else
            {
                Console.WriteLine($"Failed to create token or missing webhook URL for app {app.Name}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error launching application {app.Name}: {ex.Message}");
        }
    }
}