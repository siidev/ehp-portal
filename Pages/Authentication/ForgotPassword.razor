@page "/authentication/forgot-password"
@layout EmptyLayout
@inject SSOPortalX.Data.Security.PasswordResetService PasswordResetService
@inject SSOPortalX.Data.Services.EmailService EmailService
@inject NavigationManager NavigationManager

<div class="d-flex align-center" style="height:calc(100% - 96px)">
    <MCard Width=510 Height=480 Class="mx-auto my-auto">
        <div style="height:40px;"></div>
        <div class="mt-2 mx-auto text-center" style="width:420px;">
            <h5 class="mt-2 mb-4">Forgot Password? üîí</h5>
            <p class="text-body-2 mb-6">Enter your email and we'll send you a reset link</p>

            @if (!string.IsNullOrEmpty(_message))
            {
                <MAlert Type="AlertTypes.Success" Class="mb-4">@_message</MAlert>
            }

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MAlert Type="AlertTypes.Error" Class="mb-4">@_errorMessage</MAlert>
            }

            <MForm @ref="_form">
                <MTextField @bind-Value="_email" 
                           Label="Email Address" 
                           Type="email"
                           Outlined
                           Class="mb-6"
                           Rules="_rules" 
                           HideDetails="@("auto")" />
            </MForm>

            <MButton Class="mt-4 rounded-4 text-btn white--text" 
                     OnClick="HandleRequestReset" 
                     Height=46 
                     Width=340 
                     Color="primary">
                Send Reset Link
            </MButton>

            <div class="mt-6">
                <a href="/authentication/login" class="text-decoration-none primary--text">
                    ‚Üê Back to Login
                </a>
            </div>
        </div>
    </MCard>
</div>

@code {
    private string _email = "";
    private string _message = "";
    private string _errorMessage = "";
    private MForm? _form;

    private List<Func<string, StringBoolean>> _rules = new()
    {
        v => !string.IsNullOrEmpty(v) ? true : "Email is required"
    };

    private async Task HandleRequestReset()
    {
        if (_form is not null && _form.Validate())
        {
            var token = await PasswordResetService.GenerateResetTokenAsync(_email);

            _errorMessage = "";
            _message = $"If an account with the email {_email} exists, a password reset link has been sent.";

            if (token != null)
            {
                var resetLink = NavigationManager.ToAbsoluteUri($"/authentication/reset-password/{token.Token}").ToString();
                
                // Send actual email
                try 
                {
                    var emailSent = await EmailService.SendPasswordResetEmailAsync(_email, resetLink, token.User?.Name ?? "");
                    
                    if (emailSent)
                    {
                        System.Console.WriteLine($"‚úÖ PASSWORD RESET EMAIL SENT");
                        System.Console.WriteLine($"To: {_email}");
                        System.Console.WriteLine($"Reset Link: {resetLink}");
                    }
                    else 
                    {
                        System.Console.WriteLine($"‚ùå Failed to send password reset email to: {_email}");
                        _errorMessage = "There was an error sending the reset email. Please try again later.";
                        _message = "";
                    }
                }
                catch (Exception ex)
                {
                    System.Console.WriteLine($"‚ùå Email send error: {ex.Message}");
                    _errorMessage = "There was an error sending the reset email. Please try again later.";
                    _message = "";
                }
            }
        }
    }
}